import telebot
from telebot import types

import pandas as pd
import numpy as np
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import ElasticNet

bot = telebot.TeleBot('token')

#—Å–∞–º–∏ –¥–∞–Ω–Ω—ã–µ
df = pd.read_excel(r'C:\Users\krams\Desktop\project\–¥–∞–Ω–Ω—ã–µ_–Ω–∞_–æ–±—É—á–µ–Ω–∏–µ.xlsx')
df = df.drop('Unnamed: 0', axis=1)
X = df.drop('percent', axis=1)
y = df['percent']

#–º–æ–¥–µ–ª—å
model = ElasticNet()
grid = {'alpha':[0.0001, 0.001, 0.01, 0.1, 1, 10, 100], 'l1_ratio':np.arange(0.0, 1.0, 0.1)}
grid_model = GridSearchCV(estimator=model, param_grid=grid, scoring='neg_mean_squared_error', cv=5, verbose=2)
grid_model.fit(X.values ,y)


@bot.message_handler(commands=['start'])
def welcome(message):
    #–∫–ª–∞–≤–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö')
    item2 = types.KeyboardButton("ü™®–ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Öü™®")
    markup.add(item1, item2)

    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    mess = f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name} {message.from_user.last_name}</b>, —è –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ –≤ –±—É–¥—É—â–µ–º'
    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def conversation(message):
    if message.text == "ü™®–ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Öü™®":
        photo = open('–ø—Ä–∏–º–µ—Ä.jpg', 'rb')
        bot.send_photo(message.chat.id, photo)
        bot.send_message(message.chat.id, '8554544445445 - –≤–æ—Ç –ø—Ä–∏–º–µ—Ä –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö')

    if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö':
        msg = bot.send_message(message.chat.id, '–°–∫–∏–¥—ã–≤–∞–π—Ç–µ –≤–∞—à –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö')
        bot.register_next_step_handler(msg, predict)

def predict(data):
    if str(data.text)[1] == '1':
        mess = "–Ø –Ω–µ —É–º–µ—é –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –æ—Ü–µ–Ω–∫–∏ –≤ 12 –∫–ª–∞—Å—Å–µ –∏ –≤—ã—à–µ, –≤—ã —Å–∫–∏–Ω—É–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        bot.send_message(data.chat.id, mess)
    arr = np.empty((0))
    try:

        for i in str(data.text):
            if str(data.text)[0] == '1':
                 number = i + str(data.text)[1]
                 data.text = str(data.text)[2]
                 arr = np.append(arr, int(number))
            else:
                 arr = np.append(arr, int(i))


        else:
            if arr.size == 14:
                arr = np.delete(arr, 1)
            y_pred = grid_model.predict(arr.reshape(1, -1))
            mess = f"–í–æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—è—Ç–µ—Ä–æ–∫ –≤ 11 –∫–ª–∞—Å—Å–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {round(y_pred[0], 5)} %"
            bot.send_message(data.chat.id, mess)
            # –ø—è—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫—Ä—É—Ç–æ


    except:
        mess = "–£ –≤–∞—Å –æ—à–∏–±–∫–∞ –≤ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—Ç–µ –∏ –æ—Ç–æ—à–ª–∏—Ç–µ –µ—â–µ —Ä–∞–∑"
        bot.send_message(data.chat.id, mess)
    print(arr)

bot.polling(none_stop=True)
